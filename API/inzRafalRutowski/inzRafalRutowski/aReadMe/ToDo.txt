
Plik zawiera pomysły które można dodać do projektu


w logowaniu zrobić przypomnij(albo i nie bo to na tej samej zasadzie co potwierdzanie maila, coś w stylu że przekierowanie na naszą strone
o ile token jest aktualny i na stronie byłoby poproszenie o zmiane hasła)
jak chcemy dodac prace i nie mamy odpowiednich rzeczy (np telefonu) poprosic o to
w ConfirmEmail.js poprawnie mam stworzrzone style. Zrobić tak samo w rejestracji i logowaniu

zrobić w kontrolerze GetEmployer(emploter) metode do pobierania employera i uzyjmy jej potem w emailu SendEmplyerEmailConfirm(email controler)

zmienić metody w kontrolerach i serwisach na asynchroniczne, bo to poprawna praktyka przyspieszajaca dzialanie metod
builder.Services.AddFluentEmail(builder.Configuration);  zrobic to w program.cs
zrobić auth controller i przeneisc tam wiekszosc sndpointow z employerController
zrobić przy logowaniu sprawdzanie czy ma sie potwierdzony email, i jak nie to dac opcje zeby wysłać potwierdenie na maila
sprawdzic gdzie sie pisze changeCos a gdzie hasndleCos
dodać walidajce po stronie fronta do tego

zmienic w employeer  id z inta na guid

zaktualizować rejestracne o dodanie potwierdzenia rejestracji przez emaila

ustawić żeby w axiosie nie było trzeba za każdym razem pisać przy autoryzacji {withCredentials: true}

odzyskiwanie konta za pomocą maila

zrobić walidacje po stronie becka

w rejestracji imie, nazwisko i telefon jest opcjonalne, ale jak będziemy chcieli stworzyć prace to zrobić okno z prozba o
uzupelnienie danych jesli ich nie ma, albo dac na hidden i przy dalej odpalic, wtedy nie bedzie trzeba state nowego robic

dodac repozytoria (z metodami async)(moze nie dla wszystkich modeli, ale tak zeby potem latwo dane zmocowac do testow)

refaktoryzacja (zacznijmy od specjalizacji)

poprawiać od razu nazwy

zamiast badrequestów zrobienie zwracana błędna informacja

dodać autoryzcje do programu, zeby controllery ich wymagały (trzbea dac nagłówek [Authorize])
aby usprawnić powyższy proces i nie pisać wszędzie [Authorize] dodać policy
zrobienie autoryzacji
jwt (package jwt)
TO NIE WIEM CZY TERAZ CZY PRZY EDYCJI REJESTRACJI - dodać pole admina i osoby z nim moglyby robic wszystkie operacje
,bo normalnie tylko beda mogly osoby wykonywac operacje tylko dla swoich kont

walidacja wstpna dla controllerów
np sprawdzająca czy to lcizba dodatnia
albo tez zeby nie mozna wyslac zapytań

to można dodać przy refaktowyzaji (tylko w specjalizacji aby przecwiczyc dodawanie klas statycznych)
w interface, klasie statycznej i klasie metody powinny sie nazywac tak samo
interface
klasa statyczna : interface
kalse : interface



przy testach jednostkowych zrobienie code coverage

testy jednostkowe

zrobic po stronie fronta obsługe tokenów w memory(state) albo przez zewnetrzny program (teraz bedzie localstorage)
do tego stworzyc refreshtoken z zywotnoscia na 30 dni i access token na 15 minut

zrobic zeby cookie usuwaly sie po czasie bezczynnosci na aplikacji
dodać zeby tokeny nie żyly przez 1 dzień tylko krótko i żeby usuwały się stare i tworzyły nowe
to i to optymalnie jest zroibc zeby usuwaly sie co 15 minut w podobnym czasie
"Na koniec, używając tokenów odświeżania, upewnij się, że przechowujesz je w ich własnych plikach cookie.
Nie ma potrzeby wysyłania ich z każdym żądaniem API, więc upewnij się, że tak nie jest. 
okeny odświeżania należy dodawać tylko podczas odświeżania wygasłych tokenów dostępu. 
Oznacza to, że pliki cookie zawierające tokeny odświeżania mają nieco inne ustawienia niż pliki cookie z tokenami dostępu."

dodanie logów zapisywanych do bazy danych

zrobienie usługi(do logów) która komrpesuje nasze logi i zapisuje je na dysku

zrobic Data Seeding - wypełniania bazy danych początkowym zestawem danych w przypadku braku danych

IdentityUser można zrobić do autoryzacji. Wiele rzeczy ktorych tu zrobie ona automatyzuje, mozliwe ze przetestuje w odzielnym
projekce. Jeszcze do przemyślenia.

testowanie React
refaktoryzacja javascryptu na typescrypt

zrobic skrypt wstrzykujący dane do db

mikroserwisy
docker
Azure
Kubernetes

można zmienic strukture folderów w react na Feature-Based lub Atomic Design